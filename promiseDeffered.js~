
var events = require("events");
function Promise(){
	events.EventEmitter.call(this);
}
util.inherits(Promise,events.EventEmitter);

Promise.prototype.then =function(success,error,progress){
	if(typeof success === "function"){
		this.once("success",success);
	}
	if(typeof error === "function"){
		this.once("error",error);
	}
	if(typeof progress === "function"){
		this.once("progress",progress);
	}
	return this;
}
var Defferred  = function(){
	this.state = 'unsuccess';
	this.promise = new Promise();
}
Defferred.prototype.resolve = function(obj){
	this.state = "success";	
	this.promise.emit("success",obj);
}
Defferred.prototype.reject = function(error){
	this.state= "error";
	this.promise.emit("error",error);
}
Defferred.prototype.progress = function(data){
	this.promise.emit("progress",data);
}
var promisify = function(res){
	var defferred = new Defferred();
	var result = '';
	res.on("data",function(chunk){
		result+=chunk;
		defferred.process(data);
	});
	res.on("error",function(err){
		defferred.reject(err);
	});
	res.on("end",function(){
		defferred.resolve(result);

	});

	return defferred.promise;
}
promisify(res).then(function(){
//do something after success

},function(err){
//do something if err
},function(chunk){
//do something in progressing
});
